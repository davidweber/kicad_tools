#!/bin/bash
#
# @file   mk_kicad_makefile 
# @author David Weber david.weber.dfw@gmail.com
# @date   09/03/2024
#
# @brief create Makefile for a kicad project
#
# Copyright (C) 2024 David Weber
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

if [ $# -lt 1 ]; then
  echo "Usage $0 <project name>"
  exit -1
fi

TODAY=`date`
printf "# This file was generated using mk_kicad_makefile bash script\n"
printf "# ${TODAY}\n\n"
echo "PCB_NAME=${1}"
cat <<'END_CAT'
PROJ_NAME=PCB-$(PCB_NAME)
PCBA_NAME=PCBA-$(PCB_NAME)
OUTPUT_DIR=../output
RELEASES_DIR=../releases
GIT_BIN=$(shell which git)
ifeq ($(GIT_BIN), /usr/bin/git)
  GIT_BRANCH="$(shell git branch | grep '*' | sed -e 's/* //g')"
  COMMIT_HASH=$(shell git rev-parse --short --verify HEAD)
else
  GIT_BRANCH=UNKNOWN_BRANCH
  COMMIT_HASH=UNKNOWN_COMMIT
endif
PCB_DIR=$(OUTPUT_DIR)/PCB-$(PCB_NAME)-$(GIT_BRANCH)
PCBA_DIR=$(OUTPUT_DIR)/PCBA-$(PCB_NAME)-$(GIT_BRANCH)
FAB_DIR=$(OUTPUT_DIR)/FAB-$(PCB_NAME)-$(GIT_BRANCH)
DATE_TIME="$(shell date +%Y%m%d)"
RELEASES_VER="$(PCBA_NAME)-$(GIT_BRANCH)"
PCB_VER="$(PROJ_NAME)-$(GIT_BRANCH)"
PCBA_VER="$(PCBA_NAME)-$(GIT_BRANCH)"
BOM_CSV_FILE="$(PCBA_DIR)/$(PCB_VER)-BOM.csv"
BOM_XLSX_FILE="$(PCBA_DIR)/$(PCB_VER)-BOM.xlsx"
FAB_ZIP_FILE="$(FAB_DIR)/$(PCBA_VER)-$(DATE_TIME)-FAB.zip"
FAB_TAR_FILE="$(FAB_DIR)/$(PCBA_VER)-$(DATE_TIME)-FAB.tar.gz"
OUTPUT_TAR_FILE=$(RELEASES_DIR)/$(PCB_VER)-$(DATE_TIME)-ALL.tar.gz
OUTPUT_ZIP_FILE=$(RELEASES_DIR)/$(PCB_VER)-$(DATE_TIME)-ALL.zip
POS_FILE_ASCII_IN=$(PCBA_DIR)/$(PCB_VER)-smt-pick-place-pos-in.txt
POS_FILE_ASCII_MM=$(PCBA_DIR)/$(PCB_VER)-smt-pick-place-pos-mm.txt
POS_FILE_CSV_IN=$(PCBA_DIR)/$(PCB_VER)-smt-pick-place-pos-in.csv
POS_FILE_CSV_MM=$(PCBA_DIR)/$(PCB_VER)-smt-pick-place-pos-mm.csv
PCB_DESIGN_FILE=$(PROJ_NAME).kicad_pcb
SCH_DESIGN_FILE=$(PROJ_NAME).kicad_sch
SCH_PDF_FILE="$(OUTPUT_DIR)/$(PCB_VER)-$(DATE_TIME)-SCH.pdf"
DESIGN_TAR_FILE="$(OUTPUT_DIR)/$(PCB_VER)-$(DATE_TIME)-design.tar.gz"
DESIGN_ZIP_FILE="$(OUTPUT_DIR)/$(PCB_VER)-$(DATE_TIME)-design.zip"

all: $(OUTPUT_DIR) $(FAB_DIR) $(PCB_DIR) $(PCBA_DIR) bom gerbers drills step pcb_pdf sch_pdf zip design_input_zip
	tree ../

$(OUTPUT_DIR):
	mkdir -p $(OUTPUT_DIR)
$(FAB_DIR):
	mkdir -p $(FAB_DIR)
$(PCBA_DIR):
	mkdir -p $(PCBA_DIR)
$(PCB_DIR):
	mkdir -p $(PCB_DIR)
$(RELEASES_DIR):
	mkdir -p $(RELEASES_DIR)

echo:
	@echo GIT_BIN           = $(GIT_BIN)
	@echo PROJ_NAME         = $(PROJ_NAME)
	@echo OUTPUT_DIR        = $(OUTPUT_DIR)
	@echo FAB_DIR           = $(FAB_DIR)
	@echo GIT_BRANCH        = $(GIT_BRANCH)
	@echo COMMIT_HASH       = $(COMMIT_HASH)
	@echo DATE_TIME         = $(DATE_TIME)
	@echo RELEASES_VER      = $(RELEASES_VER)
	@echo FAB_ZIP_FILE      = $(FAB_ZIP_FILE)
	@echo FAB_TAR_FILE      = $(FAB_TAR_FILE)
	@echo OUTPUT_TAR_FILE   = $(OUTPUT_TAR_FILE)
	@echo BOM_CSV_FILE      = $(BOM_CSV_FILE)
	@echo BOM_XLSX_FILE     = $(BOM_XLSX_FILE)
	@echo POS_FILE_ASCII_IN = $(POS_FILE_ASCII_IN)
	@echo POS_FILE_ASCII_MM = $(POS_FILE_ASCII_MM)
	@echo POS_FILE_CSV_IN   = $(POS_FILE_CSV_IN)
	@echo POS_FILE_CSV_MM   = $(POS_FILE_CSV_MM)
	@echo PCB_DESIGN_FILE   = $(PCB_DESIGN_FILE)
	@echo SCH_DESIGN_FILE   = $(SCH_DESIGN_FILE)
	@echo SCH_PDF_FIILE     = $(SCH_PDF_FILE)


bom: $(OUTPUT_DIR) $(PCBA_DIR)
	kicad-cli sch export bom --fields 'Reference,Value,Footprint,$${QUANTITY},Manufacturer,MPN,Alternate PN' --output $(BOM_CSV_FILE) --exclude-dnp --group-by Footprint,Value,MPN $(SCH_DESIGN_FILE)
	ssconvert $(BOM_CSV_FILE) $(BOM_XLSX_FILE)

gerbers: $(OUTPUT_DIR) $(PCB_DIR)
	kicad-cli pcb export gerbers --board-plot-params --output $(OUTPUT_DIR)/$(PCB_VER) $(PCB_DESIGN_FILE)

pos: $(OUTPUT_DIR) $(FAB_DIR)
	kicad-cli pcb export pos --exclude-dnp --smd-only --format ascii --units in $(PCB_DESIGN_FILE) --output $(POS_FILE_ASCII_IN)
	kicad-cli pcb export pos --exclude-dnp --smd-only --format ascii --units mm $(PCB_DESIGN_FILE) --output $(POS_FILE_ASCII_MM)
	kicad-cli pcb export pos --exclude-dnp --smd-only --format csv --units in   $(PCB_DESIGN_FILE) --output $(POS_FILE_CSV_IN)
	kicad-cli pcb export pos --exclude-dnp --smd-only --format csv --units mm   $(PCB_DESIGN_FILE) --output $(POS_FILE_CSV_MM)
 
pcb_pdf: $(OUTPUT_DIR) $(PCB_DIR)
	kicad-cli pcb export pdf --layers F.Cu --output $(OUTPUT_DIR)/$(PCB_VER).pcb.front.pdf $(PCB_DESIGN_FILE)
	kicad-cli pcb export pdf --layers B.Cu --output $(OUTPUT_DIR)/$(PCB_VER).pcb.back.pdf $(PCB_DESIGN_FILE)

sch_pdf: $(OUTPUT_DIR)
	kicad-cli sch export pdf --output $(SCH_PDF_FILE) $(SCH_DESIGN_FILE)
#	kicad-cli sch export pdf --output $(OUTPUT_DIR)/$(PROJ_NAME)-SCH.pdf $(SCH_DESIGN_FILE)
#	find -name "*.kicad_sch" -exec kicad-cli sch export pdf --output $(OUTPUT_DIR)/{}-SCH.pdf {} \;

drills: $(OUTPUT_DIR) $(PCB_DIR)
	kicad-cli pcb export drill --output $(OUTPUT_DIR)/$(PCB_VER)/ $(PCB_DESIGN_FILE)

step:  $(OUTPUT_DIR) $(PCBA_DIR)
	kicad-cli pcb export step --force --drill-origin --no-unspecified --subst-models --output $(OUTPUT_DIR)/$(PCB_VER)/$(PCB_VER).step $(PCB_DESIGN_FILE)


pcba zip: $(OUTPUT_DIR) $(PCBA_DIR) gerbers drills pos bom
	@echo "zipping files"
	7z a $(FAB_ZIP_FILE) $(PCB_DIR)/* $(PCBA_DIR)/*
	tar cvzf $(FAB_TAR_FILE) $(PCB_DIR)/* $(PCBA_DIR)/*

design_input_zip:
	7z a $(DESIGN_ZIP_FILE) $(PROJ_NAME).kicad_prl $(PROJ_NAME).kicad_pro $(PROJ_NAME).kicad_pcb $(PROJ_NAME)*.kicad_sch fp-lib-table sym-lib-table Makefile *.ioc
	tar cvzf $(DESIGN_TAR_FILE) $(PROJ_NAME).kicad_prl $(PROJ_NAME).kicad_pro $(PROJ_NAME).kicad_pcb $(PROJ_NAME)*.kicad_sch fp-lib-table sym-lib-table Makefile *.ioc

release: $(RELEASES_DIR) $(OUTPUT_DIR) gerbers drills bom pcb_pdf sch_pdf step zip pos design_input_zip
	@echo Creating output tar file: $(OUTPUT_TAR_FILE)
	tar cvzf $(OUTPUT_TAR_FILE) $(OUTPUT_DIR)/* > /dev/null
	7z a $(OUTPUT_ZIP_FILE) $(OUTPUT_DIR)/*
	tree ../


clean:
	rm -rf $(OUTPUT_DIR)/*
	tree $(OUTPUT_DIR)
	rm -rf $(RELEASES_DIR)/*
	tree $(RELEASES_DIR)

.PHONY: all
END_CAT
