#!/usr/bin/python3
#
# @file   mk_kicad_symbol_lib.py
# @author David Weber <david.weber.usa@gmail.com>
# @date   07/29/2024
#
# @brief mk_kicad_symbol_lib module implementation
#
# Copyright Â© 2024 David Weber
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import sys
import os
import tempfile
import datetime
from enum import IntEnum

#-------------------------------------------------------------------------------

class Status(IntEnum):
  SUCCESS = 0
  FAILURE = -1

#-------------------------------------------------------------------------------

def mk_symbol_lib_file_header(title='kicad_symbol_lib', version="20231120", 
                              generator="kicad_symbol_editor", generator_version="8.0"):
  dt = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S %p") 
  print(f"#-----------------------------------------------------------------------------")
  print(f"# This file was generated by \"{os.path.basename(sys.argv[0])}\"")
  print(f"# Date: {dt}")
  print(f"#-----------------------------------------------------------------------------")
  print(f"({title}")
  print(f"\t(version {version})")
  print(f"\t(generator \"{generator}\")")
  print(f"\t(generator_version \"{generator_version}\")")

#-------------------------------------------------------------------------------

def mk_symbol_lib_file_footer():
  print(")")

#-------------------------------------------------------------------------------

def extract_symbol_from_file(input_file):
  output = ""
  with open(input_file) as f:
    print(f"Processing symbol file: \"{input_file}\"", file=sys.stderr)
    line = f.readline()
    for line in f:
      if ("(symbol " in line):
        output += line
        for line in f: 
          if line[0] != ")":
            output += line
        return Status.SUCCESS, output
  return Status.FAILURE, None

#-------------------------------------------------------------------------------

def process_symbol_files(dir_name):
  all_output = ""
  n_files = 0

  for filename in os.listdir(dir_name):
    f = os.path.join(dir_name, filename)
    if (os.path.isfile(f)):
      file_parts = f.split(".")
      n_parts = len(file_parts)
      if (n_parts > 0):
        if (file_parts[n_parts - 1] == "kicad_sym"):
          status, output = extract_symbol_from_file(f)
          if (status == Status.FAILURE):
            print(f"Error: failed to extract symbol from \"{f}\"", file=sys.stderr)
          else:
            all_output += output
            n_files += 1

  if (n_files > 0):
    status = Status.SUCCESS
  else:
    status = Status.FAILURE
  return status, all_output

#-------------------------------------------------------------------------------

def main(args):
  n_args = len(args)
  if (n_args != 2):
    print(f"Usage: {args[0]} <symbol input directory>", file=sys.stderr)
    exit
  else:
    dir_name = args[1]
    if not os.path.isdir(dir_name):
      print(f"Error: symbol input directory \"{dir_name}\" does not exist", file=sys.stderr)
      exit
    else:
      status, all_output = process_symbol_files(dir_name)
      if (status != Status.SUCCESS):
        print(f"Error: unable to process symbol files")
      else:
        mk_symbol_lib_file_header()
        print(all_output)
        mk_symbol_lib_file_footer()

#-------------------------------------------------------------------------------

main(sys.argv)

